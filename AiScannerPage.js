import React, { useState } from 'react';
import axios from 'axios';
import { View, Text, Button, Image, ActivityIndicator, Alert, ScrollView, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useNavigation } from '@react-navigation/native';

const AiScannerPage = () => {
  const navigation = useNavigation();
  const [selectedImage, setSelectedImage] = useState(null);
  const [previewUrl, setPreviewUrl] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [scanResult, setScanResult] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);

  // üìÇ –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
  const pickImage = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ');
      return;
    }

    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
    });

    if (!result.canceled && result.assets && result.assets.length > 0) {
      const selectedAsset = result.assets[0];
      setSelectedImage(selectedAsset);  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ URI
      setPreviewUrl(selectedAsset.uri);
      setError('');
      setScanResult(null);
    }
  };

  // üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã
  const takePhoto = async () => {
    const { status } = await ImagePicker.requestCameraPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
      return;
    }
  
    let result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      quality: 1,
    });
  
    if (!result.canceled && result.assets && result.assets.length > 0) {
      const photoUri = result.assets[0].uri;
      const fileExtension = photoUri.split('.').pop(); // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ URI
      setSelectedImage({
        uri: photoUri,
        type: `image/${fileExtension}`,  // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME —Ç–∏–ø
        name: `product-image.${fileExtension}`, // –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      });
      setPreviewUrl(photoUri); // –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      setError('');
      setScanResult(null);
    }
  };

  // üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleScan = async () => {
    if (!selectedImage) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
  
    setLoading(true);
    setError('');
  
    const formData = new FormData();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ selectedImage –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    console.log('selectedImage –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', selectedImage);
    
    formData.append('image', {
      uri: selectedImage.uri,
      type: 'image/jpeg',  // —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MIME —Ç–∏–ø, –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –µ–≥–æ
      name: 'product-image.jpg',
    });
  
    try {
      const response = await axios.post('http://192.168.0.109:8080/analyze-product', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setUploadProgress(percentCompleted);
        },
      });
  
      console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      setScanResult(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', err.response || err);
      setError(`–û—à–∏–±–∫–∞: ${err.response ? err.response.data.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.'}`);
    } finally {
      setLoading(false);
    }
  };

  // üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
  const renderScanResult = () => {
    if (!scanResult) return null;

    return (
      <View style={styles.scanResultContainer}>
        <Text style={styles.scanResultTitle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–ù–∞–∑–≤–∞–Ω–∏–µ:</Text> {scanResult.productName}
        </Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–°—Ç–∞—Ç—É—Å –•–∞–ª—è–ª—å:</Text> {scanResult.isHalal ? '–•–∞–ª—è–ª—å' : '–ù–µ –•–∞–ª—è–ª—å'}
        </Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:</Text> {scanResult.calories} –∫–∫–∞–ª –Ω–∞ 100–≥
        </Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–ë–µ–ª–∫–∏:</Text> {scanResult.proteins}–≥
        </Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–ñ–∏—Ä—ã:</Text> {scanResult.fats}–≥
        </Text>
        <Text style={styles.scanResultText}>
          <Text style={styles.bold}>–£–≥–ª–µ–≤–æ–¥—ã:</Text> {scanResult.carbohydrates}–≥
        </Text>

        <Text style={styles.scanResultSubtitle}>–°–æ—Å—Ç–∞–≤:</Text>
        {scanResult.ingredients.map((ingredient, index) => (
          <Text key={index} style={styles.scanResultText}>
            ‚Ä¢ {ingredient.name} {ingredient.isHalal ? '(–•–∞–ª—è–ª—å)' : '(–ù–µ –•–∞–ª—è–ª—å)'}
          </Text>
        ))}

        {scanResult.warnings && scanResult.warnings.length > 0 && (
          <View style={styles.warningContainer}>
            <Text style={styles.warningTitle}>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</Text>
            {scanResult.warnings.map((warning, index) => (
              <Text key={index} style={styles.warningText}>{warning}</Text>
            ))}
          </View>
        )}
      </View>
    );
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>AI –°–∫–∞–Ω–µ—Ä –ü—Ä–æ–¥—É–∫—Ç–æ–≤</Text>
      <Text style={styles.subtitle}>
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ –Ω–∞—à –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ —Å–æ—Å—Ç–∞–≤, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –•–∞–ª—è–ª—å/–•–∞—Ä–∞–º.
      </Text>

      {error && <Text style={styles.errorText}>{error}</Text>}

      <Button title="–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏" onPress={pickImage} />
      <View style={styles.spacing} />
      <Button title="–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã" onPress={takePhoto} />

      {previewUrl && (
        <Image source={{ uri: previewUrl }} style={styles.previewImage} />
      )}

      <Button
        title={loading ? `–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... ${uploadProgress}%` : '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç'}
        onPress={handleScan}
        disabled={loading || !selectedImage}
      />

      {loading && <ActivityIndicator size="large" color="#0000ff" style={styles.loadingIndicator} />}

      {renderScanResult()}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FCFCFC',
    padding: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    marginTop: 40,
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: '#888',
    marginBottom: 20,
  },
  errorText: {
    color: 'red',
    marginTop: 10,
  },
  previewImage: {
    width: 200,
    height: 200,
    marginTop: 15,
    borderRadius: 8,
  },
  scanResultContainer: {
    marginTop: 20,
    padding: 15,
    borderWidth: 1,
    borderRadius: 8,
    backgroundColor: '#fff',
    borderColor: '#ddd',
  },
  scanResultTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  scanResultText: {
    fontSize: 14,
    color: '#555',
    marginBottom: 5,
  },
  bold: {
    fontWeight: 'bold',
  },
  scanResultSubtitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 10,
  },
  warningContainer: {
    marginTop: 10,
  },
  warningTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: 'orange',
  },
  warningText: {
    fontSize: 14,
    color: 'orange',
  },
  loadingIndicator: {
    marginTop: 20,
  },
  spacing: {
    height: 20,
  },
});

export default AiScannerPage;
